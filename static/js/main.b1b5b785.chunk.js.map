{"version":3,"sources":["icons/search.svg","icons/abstract-searching.png","icons/book-of-black-cover-closed.svg","icons/dashboard.svg","icons/clip-education.png","icons/clip-bad-gateaway.png","components/Navigation.js","components/Home/sectionControl.js","components/Button.js","components/bookCard.js","components/Home/BookList.js","components/Home/bookShelf.js","components/Home/home.js","utils/BooksAPI.js","components/Home/homeLoader.js","components/Search/search.js","components/shelf/shelfButton.js","components/shelf/shelf.js","components/Content.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","props","discoverNavItem","name","img","Dashboard","Search","shelfNavItem","book","className","this","map","item","key","exact","to","toLowerCase","activeClassName","src","alt","href","split","join","Component","SectionControl","sectionName","numOfbook","shelf","Button","handleButtonClick","event","target","nextSibling","classList","toggle","handleChoice","innerText","handleButtonChoice","handleDropDownMenue","window","onclick","matches","i","dropdowns","document","getElementsByClassName","length","openDropdown","contains","remove","choices","onClick","choice","BookCard","handleBookChange","id","cards","querySelectorAll","card","textContent","includes","bookName","bookAuthor","style","opacity","bookImg","author","total","rating","avgRate","interactive","BookList","bookID","handleChangeBookShelf","Swiper","slidesPerView","spaceBetween","nextEl","prevEl","books","title","authors","imageLinks","thumbnail","averageRating","BookShelf","shelfName","bookId","ChangeBookShelf","Home","currentlyReadingBooks","filter","readBooks","wantToReadBooks","updateBookShelf","api","token","localStorage","Math","random","toString","substr","headers","get","fetch","then","res","json","data","search","query","method","body","JSON","stringify","HomeLoader","height","x","y","rx","ry","width","state","requestError","handleUserInput","setState","getBooks","a","async","BookAPI","response","changeBookState","requestState","requestBook","value","error","getBookShelf","BookId","booksOntheShelf","type","placeholder","onChange","searchIcon","searchImg","searchError","BookError","ShelfButton","handleDropDownMenues","addEventListener","catagory","catagories","Shelf","handleCatagoryChange","changeCatagoryState","showBooksByCatagory","categoriesedBooks","categories","push","handleUserChoice","shelfCatagories","cat","index","indexOf","numOfBooks","Content","getAllBooks","hasContent","getBook","BooksAPI","updateBook","getShelfBooks","path","render","App","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1b5b785.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.2ea4c436.svg\";","module.exports = __webpack_public_path__ + \"static/media/abstract-searching.c25f4472.png\";","module.exports = __webpack_public_path__ + \"static/media/book-of-black-cover-closed.6705a44b.svg\";","module.exports = __webpack_public_path__ + \"static/media/dashboard.7217f10c.svg\";","module.exports = __webpack_public_path__ + \"static/media/clip-education.a9765fb4.png\";","module.exports = __webpack_public_path__ + \"static/media/clip-bad-gateaway.b731be81.png\";","import React, { Component } from 'react'\nimport '../styles/navigation.scss'\nimport Search from '../icons/search.svg'\nimport Dashboard from '../icons/dashboard.svg'\nimport book from '../icons/book-of-black-cover-closed.svg'\nimport { NavLink } from 'react-router-dom'\nimport { exact } from 'prop-types'\n\nclass Navigation extends Component {\n    constructor(props){\n        super(props);\n        this.discoverNavItem = [{name:'Home', img:Dashboard},{name:'Search', img:Search}];\n        this.shelfNavItem = [{name:'Currently-reading', img:book},{name:'Want-to-read', img:book},{name:'Read', img:book}];\n    }\n\n    render(){\n        return(\n            <div className=\"nav-container\">\n                <h2 className=\"heading\">my<span>reads</span></h2>\n                <div className=\"sidenav\">\n                    <div className=\"sidenav-section\">\n                        <p>Discover</p>\n                        {\n                            this.discoverNavItem.map((item) => (\n                                <NavLink \n                                    key={item.name} \n                                    exact to={item.name === \"Home\" ? '/'  : `/${item.name.toLowerCase()}`} \n                                    className=\"sidenav-item\"\n                                    activeClassName=\"sidenav-item__active\"\n                                    >\n                                    <img className=\"sidenav-item-img\" src={item.img} name={item.name} alt={item.name}></img>\n                                    <span className=\"sidenav-item-text\" name={item.name}>{item.name}</span>\n                                </NavLink>\n                            ))\n                        }\n                    </div>\n                    <div className=\"sidenav-section\">\n                        <p>Bookshelf</p>\n                        {\n                            this.shelfNavItem.map((item) => (\n                                <NavLink \n                                    key={item.name} \n                                    to={`/${item.name.toLowerCase()}`} \n                                    className=\"sidenav-item\"\n                                    activeClassName=\"sidenav-item__active\"\n                                    >\n                                    <img className=\"sidenav-item-img\" src={item.img} alt={item.name}></img>\n                                    <span className=\"sidenav-item-text\" href=\"#\">{item.name.split('-').join(\" \")}</span>\n                                </NavLink>\n                            ))\n                        }\n                    </div>          \n                </div>\n            </div>\n        );\n    }\n    \n}\n\nexport default Navigation;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport '../../styles/dashboard.scss'\n\nconst SectionControl =(props) => {\n        return(\n            <div className=\"control-section\">\n                <div className=\"control-section-text\">\n                    <h1>{props.sectionName}</h1>\n                    <span className=\"control-section-text__books-num\">{props.numOfbook}</span>\n                </div>\n                <div className=\"control-section-action\">\n                    <div className={`control-section-action__back--${props.shelf}`}></div>\n                    <div className={`control-section-action__next--${props.shelf}`}></div>\n                </div>\n            </div>\n        )\n}\n\nSectionControl.propTypes = {\n    sectionName:PropTypes.string.isRequired,\n    numOfbook:PropTypes.number.isRequired,\n    shelf:PropTypes.string,\n}\n\nexport default SectionControl;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/dashboard.scss';\n\n\nclass Button extends Component {\n    constructor(props){\n        super(props);\n        this.choices = ['Currently reading','Want to read','read','none'];\n    }\n\n    handleButtonClick = (event) =>{\n        const button = event.target; \n        button.nextSibling.classList.toggle(\"show\")              \n    }\n\n    handleChoice = (event) => {\n        if(event.target.innerText !== this.props.shelf){\n            this.props.handleButtonChoice(event.target.innerText);\n        }\n    }\n\n    handleDropDownMenue = () => {\n        window.onclick = function(event) {\n            if (!event.target.matches('.dropdown-button')) {\n              var dropdowns = document.getElementsByClassName(\"dropdown-choices\");\n              var i;\n              for (i = 0; i < dropdowns.length; i++) {\n                var openDropdown = dropdowns[i];\n                if (openDropdown.classList.contains('show')) {\n                  openDropdown.classList.remove('show');\n                }\n              }\n            }\n        }\n    }\n\n    componentDidMount(){\n        this.handleDropDownMenue()\n    }\n    \n\n    render(){\n        return(\n            <div className=\"dropdown\">\n                <button className=\"dropdown-button\" onClick={this.handleButtonClick}>{this.props.shelf}</button> \n                 <div className=\"dropdown-choices\">\n                     {this.choices.map((choice) => (\n                         this.props.shelf === choice \n                         ? (<a key={choice} onClick={this.handleChoice} className=\"choice-active\">{choice}</a>)\n                         : (<a key={choice} onClick={this.handleChoice} >{choice}</a>)\n                     ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nButton.propTypes = {\n    shelf:PropTypes.string.isRequired,\n    handleButtonChoice:PropTypes.func.isRequired,\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/dashboard.scss';\nimport Rater from 'react-rater';\nimport Button from './Button'\n\nclass BookCard extends Component {\n\n    handleButtonChoice = (choice) => {\n        this.props.handleBookChange(choice, this.props.id);\n        const cards = document.querySelectorAll(\".bookCard-container\");\n                \n        for (let card of cards) {\n            if(card.textContent.includes(this.props.bookName) && card.textContent.includes(this.props.bookAuthor[0])){\n                card.style.opacity = \"0.3\";\n            }          \n        }\n    \n    }\n\n    render(){\n        return(\n            <div className=\"card-container\">\n                <div className=\"card-img\">\n                    <img src={this.props.bookImg} alt={this.props.bookName}></img>\n                </div>\n                <div className=\"card-info\">\n                    <p className=\"card-info__title\">{this.props.bookName}</p>\n                    <div className=\"card-info__author\">{this.props.bookAuthor.map((author) => (\n                       <p key={author}>{author}</p>  \n                    ))}\n                    </div>\n                    <Rater className=\"card-info__rating\" total={5} rating={this.props.avgRate} interactive={false}/>\n                    <Button shelf={this.props.shelf} handleButtonChoice={this.handleButtonChoice}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nBookCard.propTypes = {\n    id:PropTypes.string.isRequired,\n    shelf:PropTypes.string.isRequired,\n    handleBookChange:PropTypes.func.isRequired,\n    bookName:PropTypes.string.isRequired,\n    bookAuthor:PropTypes.array.isRequired,\n    bookImg:PropTypes.string.isRequired,\n    avgRate:PropTypes.number,\n}\n\nexport default BookCard;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport Swiper from 'swiper/js/swiper.esm.bundle';\nimport BookCard from '../bookCard';\n\n\n\nclass BookList extends Component {\n\n    componentDidMount() {\n        const swiper = new Swiper(`.${this.props.shelf}-swiper-container`, \n            {\n                slidesPerView: 4,\n                spaceBetween: 20,\n                slidesPerView: 'auto',\n\n                navigation: {\n                    nextEl: `.control-section-action__next--${this.props.shelf}`,\n                    prevEl: `.control-section-action__back--${this.props.shelf}`,\n                  },\n            });\n    }\n\n    handleBookChange = (choice, bookID) => {\n        this.props.handleChangeBookShelf(choice, bookID);\n    }\n\n    render(){\n        return (\n            <div className={`${this.props.shelf}-swiper-container`}>\n            <div className=\"swiper-wrapper\">\n                {this.props.books.map((book) => (\n                    <div key={book.id} className=\"swiper-slide\">\n                        <div key={book.id} className=\"bookCard-container\">\n                            <BookCard \n                                handleBookChange={this.handleBookChange} \n                                id={book.id} \n                                bookName={book.title} \n                                bookAuthor={book.authors} \n                                bookImg={book.imageLinks.thumbnail} \n                                avgRate={book.averageRating} \n                                shelf={this.props.sectionName}\n                            />\n                        </div>\n                    </div>\n                ))}\n            </div>\n          </div>\n    \n        )\n    }\n}\n\n\nBookList.propTypes = {\n    shelf:PropTypes.string.isRequired,\n    books:PropTypes.array.isRequired,\n    handleChangeBookShelf:PropTypes.func.isRequired,\n    sectionName:PropTypes.string.isRequired,\n}\n\nexport default BookList;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport '../../styles/dashboard.scss'\nimport SectionControl from './sectionControl';\nimport BookList from './BookList'\n\nclass BookShelf extends Component {\n    shelfName = (choice) => {\n        const shelfName  = choice === '' ? this.props.name : choice;\n                \n        if(shelfName === 'Currently reading'){\n            return 'currentlyReading';\n        }else if(shelfName === 'Want to read'){\n            return 'wantToRead';\n        }else if(shelfName === 'read'){\n            return 'read';\n        }else{\n            return 'none';\n        }\n    }\n\n    handleChangeBookShelf = (choice,bookId) =>{\n        const shelf = this.shelfName(choice);\n        this.props.ChangeBookShelf(shelf,bookId);\n    }\n\n    render(){\n        return(\n            <div className={`${this.shelfName('')}-container`}>\n                <SectionControl shelf={this.shelfName('')} sectionName={this.props.name} numOfbook={this.props.books.length}/>\n                {this.props.books.length > 0 \n                    ?   (<BookList \n                            handleChangeBookShelf={this.handleChangeBookShelf} \n                            shelf={this.shelfName('')} \n                            sectionName={this.props.name} \n                            books={this.props.books}/>)\n                    :   (<p className=\"empty-message\">{`Shelf is Empty`}</p>)\n                }\n            </div>\n        )\n    }\n}\n\nBookShelf.propTypes = {\n    name:PropTypes.string.isRequired,\n    books:PropTypes.array.isRequired,\n    ChangeBookShelf:PropTypes.func.isRequired\n}\n\nexport default BookShelf;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport BookShelf from './bookShelf';\nimport '../../styles/dashboard.scss'\n\nclass Home extends Component {\n\n    currentlyReadingBooks = () => {\n        return this.props.books.filter((book) => (book.shelf === \"currentlyReading\"))\n    }\n    readBooks = () => {\n        return this.props.books.filter((book) => (book.shelf === \"read\"))\n    }\n    wantToReadBooks = () => {\n        return this.props.books.filter((book) => (\n            book.shelf === \"wantToRead\"\n        ))\n    }\n    ChangeBookShelf = (shelf,bookId) => {\n        this.props.updateBookShelf(shelf,bookId)\n    }\n\n    render(){\n        return (\n            <div className=\"db-container\">\n                <BookShelf name='Currently reading' books={this.currentlyReadingBooks()} ChangeBookShelf={this.ChangeBookShelf}/>\n                <BookShelf name='Want to read' books={this.wantToReadBooks()} ChangeBookShelf={this.ChangeBookShelf}/>\n                <BookShelf name='read' books={this.readBooks()} ChangeBookShelf={this.ChangeBookShelf}/>\n            </div>\n            \n        )\n    }\n}\n\nHome.propTypes = {\n    books:PropTypes.array.isRequired,\n    updateBookShelf:PropTypes.func.isRequired\n}\n\nexport default Home;","const api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)","import React from \"react\"\nimport ContentLoader from \"react-content-loader\" \n\nconst HomeLoader = () => (\n  <ContentLoader\n    height={320}\n\n  >\n    {/* <rect x=\"75\" y=\"13\" rx=\"4\" ry=\"4\" width=\"100\" height=\"13\" /> \n      */}\n\n      {/* row 1*/}\n    <rect x=\"14\" y=\"10\" rx=\"0\" ry=\"0\" width=\"70\" height=\"8\" />\n\n    <rect x=\"20\" y=\"25\" rx=\"3\" ry=\"3\" width=\"40\" height=\"60\" />\n    <rect x=\"15\" y=\"25\" rx=\"3\" ry=\"3\" width=\"100\" height=\"55\" />\n\n    <rect x=\"125\" y=\"25\" rx=\"3\" ry=\"3\" width=\"40\" height=\"60\" />\n    <rect x=\"120\" y=\"25\" rx=\"3\" ry=\"3\" width=\"100\" height=\"55\" />\n\n    <rect x=\"230\" y=\"25\" rx=\"3\" ry=\"3\" width=\"40\" height=\"60\" />\n    <rect x=\"225\" y=\"25\" rx=\"3\" ry=\"3\" width=\"100\" height=\"55\" />\n\n    <rect x=\"335\" y=\"25\" rx=\"3\" ry=\"3\" width=\"40\" height=\"60\" />\n    <rect x=\"330\" y=\"25\" rx=\"3\" ry=\"3\" width=\"100\" height=\"55\" />\n\n      {/* row 2*/}\n    <rect x=\"14\" y=\"105\" rx=\"4\" ry=\"0\" width=\"70\" height=\"8\" />\n\n    <rect x=\"20\" y=\"120\" rx=\"3\" ry=\"3\" width=\"40\" height=\"60\" />\n    <rect x=\"15\" y=\"120\" rx=\"3\" ry=\"3\" width=\"100\" height=\"55\" />\n\n    <rect x=\"125\" y=\"120\" rx=\"3\" ry=\"3\" width=\"40\" height=\"60\" />\n    <rect x=\"120\" y=\"120\" rx=\"3\" ry=\"3\" width=\"100\" height=\"55\" />\n\n    <rect x=\"230\" y=\"120\" rx=\"3\" ry=\"3\" width=\"40\" height=\"60\" />\n    <rect x=\"225\" y=\"120\" rx=\"3\" ry=\"3\" width=\"100\" height=\"55\" />\n\n    <rect x=\"335\" y=\"120\" rx=\"3\" ry=\"3\" width=\"40\" height=\"60\" />\n    <rect x=\"330\" y=\"120\" rx=\"3\" ry=\"3\" width=\"100\" height=\"55\" />\n\n    {/* row 3*/}\n    <rect x=\"14\" y=\"200\" rx=\"4\" ry=\"0\" width=\"70\" height=\"8\" />\n\n    <rect x=\"20\" y=\"215\" rx=\"3\" ry=\"3\" width=\"40\" height=\"60\" />\n    <rect x=\"15\" y=\"215\" rx=\"3\" ry=\"3\" width=\"100\" height=\"55\" />\n\n    <rect x=\"125\" y=\"215\" rx=\"3\" ry=\"3\" width=\"40\" height=\"60\" />\n    <rect x=\"120\" y=\"215\" rx=\"3\" ry=\"3\" width=\"100\" height=\"55\" />\n\n    <rect x=\"230\" y=\"215\" rx=\"3\" ry=\"3\" width=\"40\" height=\"60\" />\n    <rect x=\"225\" y=\"215\" rx=\"3\" ry=\"3\" width=\"100\" height=\"55\" />\n\n    <rect x=\"335\" y=\"215\" rx=\"3\" ry=\"3\" width=\"40\" height=\"60\" />\n    <rect x=\"330\" y=\"215\" rx=\"3\" ry=\"3\" width=\"100\" height=\"55\" />\n\n\n    \n  </ContentLoader>\n)\n\nexport default HomeLoader;","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport '../../styles/search.scss';\nimport searchIcon from '../../icons/search.svg';\nimport * as BookAPI from '../../utils/BooksAPI';\nimport BookCard from '../bookCard';\nimport searchImg from '../../icons/clip-education.png';\nimport searchError from '../../icons/clip-bad-gateaway.png';\nimport BookError from '../../icons/abstract-searching.png'\n\n\nclass Search extends Component {\n    state = {\n        query:'',\n        books:[],\n        requestError:false,\n    }\n\n    handleUserInput = (query) => {\n        this.setState({query: query});\n    }\n\n    getBooks = async (query) => {\n        const response = await BookAPI.search(query);\n        return response;\n    }\n\n    changeBookState = (books , requestState) => {\n        if(this.state.query){\n            this.setState({ \n                books: books,\n                requestError: requestState,\n            })\n        }\n    }\n\n    requestBook = async (event) => {\n        const query = event.target.value;\n        \n        this.handleUserInput(query);\n\n        if(query){\n            const response = await this.getBooks(query);            \n            if(response.error){\n                this.changeBookState([], true);\n            }else{\n                this.changeBookState(response, false);\n            }\n        }else{\n            this.changeBookState([], false);\n        }\n    }\n\n    getBookShelf = (BookId) => {\n        const booksOntheShelf = this.props.books;\n        let shelf = '';\n        for (let i = 0; i < booksOntheShelf.length; i++) {\n            if(booksOntheShelf[i].shelf === 'wantToRead' && booksOntheShelf[i].id === BookId){\n                shelf = 'Want to read';\n                break;\n            }else if(booksOntheShelf[i].shelf === 'currentlyReading' && booksOntheShelf[i].id === BookId){\n                shelf = 'Currently reading';\n                break;\n            }else if(booksOntheShelf[i].shelf === 'read' && booksOntheShelf[i].id === BookId){\n                shelf = 'read';\n                break;\n            }else{\n                shelf = 'none';\n            }\n            \n        }\n            \n        return shelf;\n        // for (let i = 0; i < searchBooks.length; i++) {\n        //     for (let j = 0; j < booksOntheShelf.length; j++) {\n        //         if(booksOntheShelf[j].shelf === \"wantToRead\" && booksOntheShelf[j].id === searchBooks[i].id){\n        //             console.log(booksOntheShelf[j]);\n        //             return 'Want to read';\n        //         }// }else if(booksOntheShelf[j].id === searchBooks[i].id && booksOntheShelf[j].shelf === \"currentlyReading\"){\n        //         //     return 'Currently reading';\n        //         // }else if(booksOntheShelf[j].id === searchBooks[i].id && booksOntheShelf[j].shelf === \"read\"){\n        //         //     return 'read';\n        //         // }else {\n        //         //     return 'none'\n        //         // }             \n        //     }\n            \n        // }\n    }\n\n    handleBookChange = (choice,bookId) => {\n        let shelf = '';\n        if(choice === 'Currently reading'){\n            shelf = 'currentlyReading'\n        }else if(choice === 'Want to read'){\n            shelf = 'wantToRead'\n        }else if(choice === 'read'){\n            shelf = 'read'\n        }else {\n            shelf = 'none'\n        }\n        this.props.updateBookShelf(shelf,bookId)\n    }\n\n    render(){\n        return (\n            <div className=\"search-container\">\n                <div className=\"search-bar-container\">\n                    <input className=\"search-bar\"\n                    type=\"text\" placeholder=\"Search\"\n                    value={this.state.query}\n                    onChange={this.requestBook}\n                    />\n                    <img src={searchIcon} alt=\"search icon\" className=\"search-bar-icon\"></img>\n                </div>\n                {\n                    !this.state.query && (\n                                        <div>\n                                            <img src={searchImg} alt='searchImg' className=\"search-Img\"></img>\n                                            <p>Meet your next <span>Book</span> </p>\n                                        </div>)\n                }\n                \n                {\n                    !this.state.requestError ?\n                        <div className=\"books-container\">\n                            {\n                                \n                                this.state.query && (this.state.books.map((book) => (                                                        \n                                    <BookCard\n                                    key={book.id}\n                                    id={book.id}  \n                                    bookImg={book.imageLinks ? book.imageLinks.thumbnail : BookError} \n                                    bookName={book.title}\n                                    bookAuthor={book.authors ? book.authors : ['author: not available']}\n                                    avgRate={book.averageRating ? book.averageRating : 0}\n                                    shelf={this.getBookShelf(book.id)}\n                                    handleBookChange={this.handleBookChange}\n                                    />\n                                ))) \n                            }\n                        </div>\n                    :   (<div>\n                            <img src={searchError} alt='searchError' className=\"search-Error\"></img>\n                            <p>Sorry we couldn't find any matches for <span>{this.state.query}</span></p>\n                        </div>\n                        )\n\n                }\n            </div>\n        )\n    }\n}\n\nSearch.propTypes = {\n    books:PropTypes.array.isRequired,\n    updateBookShelf:PropTypes.func.isRequired\n}\n\n\nexport default Search;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/shelf.scss';\n\n\nclass ShelfButton extends Component {\n\n    handleButtonClick = (event) =>{\n        const button = event.target; \n        button.nextSibling.classList.toggle(\"show\")              \n    }\n\n    handleChoice = (event) => {\n        if(event.target.innerText !== this.props.shelf){\n            this.props.handleButtonChoice(event.target.innerText);\n        }\n    }\n\n    handleDropDownMenues = () => {\n        window.onclick = function(event) {\n            if (!event.target.matches('.shelf-dropdown-button') && !event.target.matches('.dropdown-button')) {\n              var dropdowns = document.getElementsByClassName(\"dropdown-choices\");              \n              var i;\n              for (i = 0; i < dropdowns.length; i++) {\n                var openDropdown = dropdowns[i];\n                if (openDropdown.classList.contains('show')) {\n                  openDropdown.classList.remove('show');\n                }\n              }\n            }\n        }\n    }\n\n    componentDidMount(){\n        document.addEventListener('click', this.handleDropDownMenues);\n    }\n    \n\n    render(){\n        return(\n            <div className=\"shelf-dropdown\">\n                <button className=\"shelf-dropdown-button\" onClick={this.handleButtonClick}>{this.props.catagory}</button> \n                 <div className=\"dropdown-choices\">\n                     {this.props.catagories.map((choice) => (\n                         this.props.shelf === choice \n                         ? (<a key={choice} onClick={this.handleChoice} className=\"choice-active\">{choice}</a>)\n                         : (<a key={choice} onClick={this.handleChoice} >{choice}</a>)\n                     ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nShelfButton.propTypes = {\n    catagory:PropTypes.string.isRequired,\n    catagories:PropTypes.array.isRequired,\n    handleButtonChoice:PropTypes.func.isRequired,\n}\n\nexport default ShelfButton;","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport '../../styles/shelf.scss';\nimport BookCard from '../bookCard';\nimport SectionControl from '../Home/sectionControl';\nimport ShelfButton from './shelfButton';\nimport BookError from '../../icons/abstract-searching.png'\n\n\n\nclass Shelf extends Component {\n    state = {\n        catagory: 'All'\n    }\n\n    handleCatagoryChange = (choice) => {\n        this.changeCatagoryState(choice);\n        this.showBooksByCatagory(choice);\n    }\n\n    showBooksByCatagory = (choice) => {\n        const books = this.props.books;\n        const categoriesedBooks = []\n        if(choice !== 'All'){\n        books.map((book) => {\n            let categories = book.categories;\n            if(categories){                \n                categories.map((catagory) => {\n                    if(catagory.toLowerCase() === choice){                        \n                        categoriesedBooks.push(book);\n                    }\n                })\n            }\n        })\n            return categoriesedBooks;\n        }else{\n            return books;\n        }\n    }\n\n    requestBook = async (event) => {\n        const choice = event.target.value;\n        this.handleUserChoice(choice);\n    }\n\n    getBookShelf = (BookId) => {\n        const booksOntheShelf = this.props.books;\n        let shelf = '';\n        for (let i = 0; i < booksOntheShelf.length; i++) {\n            if(booksOntheShelf[i].shelf === 'wantToRead' && booksOntheShelf[i].id === BookId){\n                shelf = 'Want to read';\n                break;\n            }else if(booksOntheShelf[i].shelf === 'currentlyReading' && booksOntheShelf[i].id === BookId){\n                shelf = 'Currently reading';\n                break;\n            }else if(booksOntheShelf[i].shelf === 'read' && booksOntheShelf[i].id === BookId){\n                shelf = 'read';\n                break;\n            }else{\n                shelf = 'none';\n            }\n            \n        }\n            \n        return shelf;\n        // for (let i = 0; i < searchBooks.length; i++) {\n        //     for (let j = 0; j < booksOntheShelf.length; j++) {\n        //         if(booksOntheShelf[j].shelf === \"wantToRead\" && booksOntheShelf[j].id === searchBooks[i].id){\n        //             console.log(booksOntheShelf[j]);\n        //             return 'Want to read';\n        //         }// }else if(booksOntheShelf[j].id === searchBooks[i].id && booksOntheShelf[j].shelf === \"currentlyReading\"){\n        //         //     return 'Currently reading';\n        //         // }else if(booksOntheShelf[j].id === searchBooks[i].id && booksOntheShelf[j].shelf === \"read\"){\n        //         //     return 'read';\n        //         // }else {\n        //         //     return 'none'\n        //         // }             \n        //     }\n            \n        // }\n    }\n\n    handleBookChange = (choice,bookId) => {\n        let shelf = '';\n        if(choice === 'Currently reading'){\n            shelf = 'currentlyReading'\n        }else if(choice === 'Want to read'){\n            shelf = 'wantToRead'\n        }else if(choice === 'read'){\n            shelf = 'read'\n        }else {\n            shelf = 'none'\n        }\n        this.props.updateBookShelf(shelf,bookId)\n    }\n\n    shelfCatagories = () =>{\n        const cat = ['All'];\n        const books = this.props.books;\n        for (let index = 0; index < books.length; index++) {\n            let catagories = books[index].categories;\n            if(catagories){\n                catagories.map((catagory) => {\n                    if((cat.indexOf(catagory.toLowerCase()) === -1)){\n                        cat.push(catagory.toLowerCase());\n                    }\n                });\n            }\n        }\n        \n        return cat;\n    }\n\n    changeCatagoryState(choice) {\n        this.setState({\n            catagory: choice,\n        });\n    }\n\n    render(){\n        return (\n            <div className=\"shelf-container\">\n                <div className=\"shelf-top\">\n                    <SectionControl sectionName={this.props.shelfName} numOfbook={this.props.numOfBooks}/>\n                    <div className=\"shelf-button\">\n                        <ShelfButton \n                            catagory={this.state.catagory} \n                            catagories={this.shelfCatagories()} \n                            handleButtonChoice={this.handleCatagoryChange} \n                        />\n                    </div>\n                </div>\n\n                <div className=\"books-container shelf\">\n                    {\n\n                        this.showBooksByCatagory(this.state.catagory).length > 0 ?\n                        this.showBooksByCatagory(this.state.catagory).map((book) => (\n                            <BookCard\n                                key={book.id}\n                                id={book.id}  \n                                bookImg={book.imageLinks ? book.imageLinks.thumbnail : BookError} \n                                bookName={book.title}\n                                bookAuthor={book.authors ? book.authors : ['author: not available']}\n                                avgRate={book.averageRating ? book.averageRating : 0}\n                                shelf={this.getBookShelf(book.id)}\n                                handleBookChange={this.handleBookChange}\n                            />\n                        ))\n                        : <p className=\"shelf-empty\">Shelf is Empty</p>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nShelf.propTypes = {\n    books:PropTypes.array.isRequired,\n    updateBookShelf:PropTypes.func.isRequired,\n    shelfName:PropTypes.string.isRequired,\n    numOfBooks:PropTypes.number.isRequired,\n}\n\nexport default Shelf;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\nimport Home from './Home/home';\nimport * as BooksAPI from '../utils/BooksAPI';\nimport HomeLoader from './Home/homeLoader';\nimport Search from './Search/search'\nimport Shelf from './shelf/shelf';\nimport '../styles/content.scss'\n\n\n\nclass Content extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            books:[],\n            hasContent:false,\n        }\n    }\n\n    componentDidMount(){\n       this.getAllBooks()   \n    }\n\n    getAllBooks = () => {\n        BooksAPI.getAll()\n        .then((books) => {\n            this.setState({\n                books:[...books],\n                hasContent:true,\n            })            \n        }) \n    }\n\n    getBook = async (bookId) => {\n       const response = await BooksAPI.get(bookId);\n       return response;\n    }\n\n    updateBook = (book,shelf) => {\n        BooksAPI.update(book, shelf)\n        .then(() => {\n            this.getAllBooks();\n        })\n    }\n\n    updateBookShelf = async (shelf , bookId) => {\n        const book = await this.getBook(bookId);        \n        this.updateBook(book,shelf);\n    }\n    \n    getShelfBooks = (shelf) => {\n        return this.state.books.filter(book => (\n            book.shelf === shelf\n        ))\n    }\n\n    render(){        \n        return(\n            <div className=\"content\">\n                <Route  path='/' exact render ={() => (\n                    <div>\n                        {this.state.hasContent ? (\n                            <Home books={this.state.books} updateBookShelf={this.updateBookShelf}/>\n                        ):(\n                            <HomeLoader />\n                        )}\n                    </div>\n                    \n                )} />\n\n                <Route   path='/search' render ={() => (\n                    <Search books={this.state.books} updateBookShelf={this.updateBookShelf}/>\n                )} />\n\n                <Route  path='/currently-reading' render ={() => (\n                    <Shelf \n                        shelfName='Currently reading' \n                        numOfBooks={this.getShelfBooks('currentlyReading').length}\n                        books={this.getShelfBooks('currentlyReading')}\n                        updateBookShelf={this.updateBookShelf}\n                    />\n                )} />\n\n                <Route  path='/want-To-Read'  render ={() => (\n                    <Shelf \n                    shelfName='Want to read' \n                    numOfBooks={this.getShelfBooks('wantToRead').length}\n                    books={this.getShelfBooks('wantToRead')}\n                    updateBookShelf={this.updateBookShelf}\n                    />\n                )} />\n\n                <Route  path='/read' render ={() => (\n                    <Shelf \n                    shelfName='Read' \n                    numOfBooks={this.getShelfBooks('read').length}\n                    books={this.getShelfBooks('read')}\n                    updateBookShelf={this.updateBookShelf}\n                    />\n                )} />\n            </div>\n\n        );\n    }\n}\n\nexport default Content;","import React, { Component } from 'react';\nimport Navigation from './Navigation';\nimport Content from './Content'\n\n\nimport '../styles/App.scss';\n\nclass App extends Component {\n  render(){\n    return (\n      <main className=\"container\">\n        <Navigation />\n        <Content />\n      </main>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}